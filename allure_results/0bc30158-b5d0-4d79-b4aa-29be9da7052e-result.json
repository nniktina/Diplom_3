{"name": "Проверка, при создании нового заказа счётчик увеличиваются", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_large__G21Vg\"> is not clickable at point (1372,440) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31", "trace": "self = <tests.test_orders.TestOrdersLine object at 0x1026b4d50>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e2f8fb98-fe49-41eb-8b17-37b70791a115\")>\nlogin = ['shortmichael@hotmail.com', 'emarq', 'Regina'], ingredient_1 = ('xpath', \"(//a[contains(@class, 'BurgerIngredient_ingredient')])[1]\")\ningredient_2 = ('xpath', \"(//a[contains(@class, 'BurgerIngredient_ingredient')])[7]\"), counter_orders = ('xpath', '(//p[contains(@class, \"OrderFeed_number\")])[1]')\n\n    @pytest.mark.parametrize('ingredient_1, ingredient_2, counter_orders', [\n        [MainPageLocators.BURGER_INGREDIENT_BUNS, MainPageLocators.BURGER_INGREDIENT_CUTLET, MainPageLocators.COUNT_ORDERS_ALL_TIME],\n        [MainPageLocators.BURGER_INGREDIENT_BUNS, MainPageLocators.BURGER_INGREDIENT_CUTLET, MainPageLocators.COUNT_ORDERS_TODAY]])\n    @allure.title('Проверка, при создании нового заказа счётчик увеличиваются')\n    def test_when_creating_new_order_counter_increases(self, driver, login, ingredient_1, ingredient_2, counter_orders):\n        main_page = MainPage(driver)\n        main_page.open(Urls.URL_SB)\n>       main_page.click_on_login_in_account_button()\n\ntests/test_orders.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/main_page.py:20: in click_on_login_in_account_button\n    self.element_is_visible(self.locators.BUTTON_ACCOUNT).click()\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1029cd490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"button_but...sys.mjs:204:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_large__G21Vg\"> is not clickable at point (1372,440) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Клик по кнопке \"Войти в аккаунт\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"button_button__33qZ0 button_button_type_primary__1O7Bx button_button_size_large__G21Vg\"> is not clickable at point (1372,440) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:191:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:335:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:176:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:135:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:204:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n", "trace": "  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/pages/main_page.py\", line 20, in click_on_login_in_account_button\n    self.element_is_visible(self.locators.BUTTON_ACCOUNT).click()\n  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/anastasia.nikitina/PycharmProjects/Diplom/Diplom_3/.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1706712499489, "stop": 1706712499521}], "parameters": [{"name": "driver", "value": "'firefox'"}, {"name": "ingredient_1", "value": "('xpath', \"(//a[contains(@class, 'BurgerIngredient_ingredient')])[1]\")"}, {"name": "ingredient_2", "value": "('xpath', \"(//a[contains(@class, 'BurgerIngredient_ingredient')])[7]\")"}, {"name": "counter_orders", "value": "('xpath', '(//p[contains(@class, \"OrderFeed_number\")])[1]')"}], "start": 1706712498608, "stop": 1706712499522, "uuid": "44b65281-4bb3-4a5d-aba4-bd474c8cd321", "historyId": "ade7344111ef68c43f75106bc894898d", "testCaseId": "49af44e46d46d3ebcc7c7d4d7a1ffe49", "fullName": "tests.test_orders.TestOrdersLine#test_when_creating_new_order_counter_increases", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrdersLine"}, {"name": "host", "value": "NastyaNikitina.local"}, {"name": "thread", "value": "97437-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}